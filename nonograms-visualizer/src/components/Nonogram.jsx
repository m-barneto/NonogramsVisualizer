import React, { Component } from "react";
import Table from "./Table";
import Solver from "../nonogram/NonogramSolver";

export default class Nonogram extends Component {
  constructor(props) {
    super(props);
    this.data = JSON.parse(
      //'{"hasColor":false,"columns":20,"rows":20,"colors":0,"columnLayers":6,"rowLayers":4,"colorCodes":[],"rowData":[-1,-1,6,6,-1,-1,8,7,-1,1,3,3,-1,-1,-1,5,-1,3,2,2,3,2,1,3,2,2,2,2,-1,2,3,2,-1,1,2,1,-1,-1,2,1,-1,1,3,1,-1,-1,-1,10,-1,-1,-1,18,-1,-1,1,17,-1,-1,-1,13,-1,-1,8,3,-1,4,1,3,-1,3,4,1,-1,4,2,1,6,3,1,4],"columnData":[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,2,2,-1,-1,-1,-1,-1,-1,-1,2,2,2,-1,-1,-1,1,-1,-1,3,1,2,1,2,2,-1,1,1,2,2,2,3,3,3,-1,2,3,4,-1,2,2,3,2,2,1,-1,1,1,2,3,5,5,6,2,4,10,6,5,4,4,3,3,1,2,1,1,1,1,1,1,1,1,1,6,9,1,1,1,5,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"rowColorData":[],"columnColorData":[]}'
      '{"hasColor":false,"columns":45,"rows":35,"colors":0,"columnLayers":9,"rowLayers":7,"colorCodes":[],"rowData":[-1,-1,-1,-1,-1,6,4,-1,-1,-1,-1,-1,10,7,-1,-1,-1,-1,-1,13,15,-1,-1,-1,-1,2,23,1,-1,-1,2,4,9,6,1,-1,-1,3,5,6,6,6,-1,-1,-1,5,15,5,5,-1,-1,-1,-1,-1,31,4,-1,-1,-1,-1,14,17,3,-1,-1,4,5,1,18,2,-1,6,2,2,10,8,1,2,2,1,2,9,9,2,-1,2,2,1,3,22,1,-1,-1,-1,2,5,23,2,-1,-1,2,8,19,4,1,-1,-1,3,4,23,3,1,-1,-1,-1,-1,10,15,2,-1,-1,-1,-1,10,15,8,-1,-1,1,8,14,6,2,-1,-1,-1,10,10,4,2,-1,3,5,11,3,2,2,-1,-1,2,3,11,4,11,-1,1,12,4,6,3,2,2,5,3,4,5,3,2,1,3,1,2,4,4,2,1,2,2,1,4,4,2,-1,-1,1,2,4,5,2,-1,-1,-1,2,5,7,2,-1,-1,-1,-1,3,16,2,-1,-1,-1,-1,2,14,2,-1,-1,4,1,1,3,3,-1,-1,-1,7,5,2,3,-1,-1,-1,-1,-1,14,7,-1,-1,-1,-1,13,5,2,-1,-1,-1,-1,12,3,3],"columnData":[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,5,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,3,1,3,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,1,1,2,1,4,-1,3,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,4,-1,3,4,5,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,3,2,1,4,1,3,5,3,3,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,4,4,8,11,10,9,8,6,6,7,1,1,-1,-1,-1,5,-1,-1,-1,4,3,2,2,19,4,4,4,2,6,5,1,1,2,2,10,7,6,1,1,2,2,3,3,3,9,4,4,5,1,1,1,1,7,7,7,5,5,-1,-1,-1,4,3,-1,8,9,10,13,1,1,6,1,1,6,1,8,8,7,8,8,8,9,9,14,14,13,12,12,11,11,2,1,1,2,2,3,2,4,2,1,1,6,4,-1,-1,-1,1,5,8,4,2,3,3,3,3,2,3,2,2,2,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,2,2,1,2,1,4,1,3,2,2,1,1,1,8,3,-1,5,8,11,5,4,4,4,3,3,3,3,4,6,2,5,5,4,4,4,3,3,2,1,2,1,1,2,1,1,1,3,4,4,2,1,8,4,2,2,2,3,3,5,4,5],"rowColorData":[],"columnColorData":[]}'
    );
    this.start();
  }
  sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  start = async () => {
    console.log("Waiting for table to populate.");
    while (document.querySelectorAll("Table").length === 0) {
      await this.sleep(100);
    }
    let solver = new Solver(document, this.data);
    solver.solve();
  };

  render() {
    return (
      <div>
        <table>
          <tbody>
            <tr>
              <td></td>
              <td>
                <Table
                  columns={this.data["columns"]}
                  rows={this.data["columnLayers"]}
                  data={this.data["columnData"]}
                  type="col"
                />
              </td>
            </tr>
            <tr>
              <td>
                <Table
                  columns={this.data["rowLayers"]}
                  rows={this.data["rows"]}
                  data={this.data["rowData"]}
                  type="row"
                />
              </td>
              <td>
                <Table
                  columns={this.data["columns"]}
                  rows={this.data["rows"]}
                  data={new Array(
                    this.data["columns"] * this.data["rows"]
                  ).fill(-1)}
                  type="board"
                />
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    );
  }
}
